/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.User;

import Business.EcoSystem;

import Business.UserAccountManagement.UserAccount;
import Business.WorkQueue.ListingRequest;
import Business.WorkQueue.ListingRequestDirectory;
import Business.User.User;
//import Utility.Notification;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author Nagarjun Mallesh
 */
public class BuilderResponseJPanel extends javax.swing.JPanel {

    EcoSystem system;
    JPanel rightSidePanel;
    /**
     * Creates new form BloodDonations
     * @param system
     * @param rightSidePanel
     */

    UserAccount userAcc;
    public BuilderResponseJPanel(JPanel rightSidePanel,EcoSystem system,UserAccount userAcc) {
        initComponents();
         this.rightSidePanel=rightSidePanel;
        this.system=system;
        this.userAcc=userAcc;
      displayTable();

    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListingsTbl = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAccomodation = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtCost = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        collectOrder = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(250, 249, 251));
        setPreferredSize(new java.awt.Dimension(1160, 750));

        jPanel1.setBackground(new java.awt.Color(250, 249, 251));
        jPanel1.setPreferredSize(new java.awt.Dimension(1160, 750));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("SF Pro Display", 1, 24)); // NOI18N
        jLabel1.setText("Listing Details");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(44, 31, -1, -1));

        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseClicked(evt);
            }
        });

        ListingsTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Consultant Name", "Builder", "Status"
            }
        ));
        ListingsTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ListingsTblMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ListingsTbl);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 130, -1, 540));

        jTextAccomodation.setColumns(20);
        jTextAccomodation.setRows(5);
        jTextAccomodation.setPreferredSize(new java.awt.Dimension(200, 100));
        jScrollPane2.setViewportView(jTextAccomodation);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 170, 440, 140));

        txtCost.setColumns(20);
        txtCost.setRows(5);
        txtCost.setPreferredSize(new java.awt.Dimension(200, 100));
        jScrollPane3.setViewportView(txtCost);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 380, 440, 150));

        jLabel2.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("Total Cost :");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 340, 180, -1));

        jLabel3.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("List of Accomodations :");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 130, 270, -1));

        collectOrder.setBackground(new java.awt.Color(51, 51, 255));
        collectOrder.setFont(new java.awt.Font("SF Pro Text", 0, 14)); // NOI18N
        collectOrder.setForeground(new java.awt.Color(255, 255, 255));
        collectOrder.setText("Acccept");
        collectOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                collectOrderActionPerformed(evt);
            }
        });
        jPanel1.add(collectOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 630, 210, 39));

        cancelButton.setBackground(new java.awt.Color(255, 55, 95));
        cancelButton.setFont(new java.awt.Font("SF Pro Text", 1, 14)); // NOI18N
        cancelButton.setForeground(new java.awt.Color(255, 255, 255));
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        jPanel1.add(cancelButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 630, 200, 39));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1148, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ListingsTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListingsTblMouseClicked
        // TODO add your handling code here:
        txtCost.setText("");
        jTextAccomodation.setText("");

        DefaultTableModel table = (DefaultTableModel) ListingsTbl.getModel();
        int selectedRow=ListingsTbl.getSelectedRow();
        int sRow=Integer.parseInt(table.getValueAt(selectedRow, 0).toString());
      
        ListingRequestDirectory medDir= system.getListingRequestDirectory();
        List<ListingRequest> listorder=medDir.getListingRequirement();
        int l=listorder.size();
        for(int i=0;i<l;i++)
        {
            ListingRequest medReq=listorder.get(i);
            if(sRow==medReq.getId())
            {
                Map<String,String> orderMap=medReq.getListingOrderList();
                int count =1;
                for (String key: orderMap.keySet()) {
                    jTextAccomodation.append("Item "+ count+ " : "+key+" Quantity : "+orderMap.get(key)+"\n");
                    count++;

                }
                Map<String,String> orderMap2=medReq.getListingOrderList();
                int n=0;
                for (String key: orderMap2.keySet()) {
                    
                    n=n+(Integer.parseInt(orderMap2.get(key)));
                    

                }
                txtCost.append(String.valueOf(n));

            }
        }
    }//GEN-LAST:event_ListingsTblMouseClicked

    private void jScrollPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_jScrollPane1MouseClicked

    private void collectOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_collectOrderActionPerformed
        // TODO add your handling code here:
        orderCollection();

    }//GEN-LAST:event_collectOrderActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:

        cancelOrder();

    }//GEN-LAST:event_cancelButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ListingsTbl;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton collectOrder;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextAccomodation;
    private javax.swing.JTextArea txtCost;
    // End of variables declaration//GEN-END:variables

    private void displayTable() {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    
        ListingRequestDirectory listingDirectory=system.getListingRequestDirectory();
        List<ListingRequest> order=listingDirectory.getListingRequirement();
        int l=order.size();
        User r=(User)userAcc;
        for(int i=0;i<l;i++)
        {
            ListingRequest reqMed=order.get(i);
            if(reqMed.getStudentId().matches(r.getUserId()))
            {
                DefaultTableModel table = (DefaultTableModel) ListingsTbl.getModel();
                String s1=String.valueOf(reqMed.getId());
                
                
                String s[]={s1,reqMed.getConsultantName(),reqMed.getBuilderName(),reqMed.getStatus()};
                table.addRow(s);
            
            
            }
        }
    
    
    }

    private void orderCollection() {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
   DefaultTableModel  t2 = (DefaultTableModel) ListingsTbl.getModel();
        int selectedRow=ListingsTbl.getSelectedRow();
        if(selectedRow>=0)
        {
        int s=Integer.parseInt(t2.getValueAt(selectedRow, 0).toString());
        System.out.println("id"+s);
        ListingRequestDirectory dire=system.getListingRequestDirectory();
        List<ListingRequest> order=dire.getListingRequirement();
        int u=order.size();
        
        for(int i=0;i<u;i++)
        {
            ListingRequest o=order.get(i);
            if(s==o.getId()/*&&o.getStatus().matches("Deliver Man Assigned")*/)
            {
                if(o.getStatus().matches("Ready for pickup"))
                {
                    o.setStatus("Order Recieved");
                    JOptionPane.showMessageDialog(null,"Order Received, Successfully.");  
                }
                else
                {
                 JOptionPane.showMessageDialog(null,"Wrong Move!!");  

                }
            }
        }
           ListingsTbl.setModel(new DefaultTableModel(null,new String[]{"ID","Doctor Name","Pharmacy","Status"}));
        displayTable();
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Select a Row!!");  
        }
    
    
    
    }
    
//    public void sendmail(String subject, String content) {
//        Notification notification = new Notification();
//        String toEmail = "aedproject22@gmail.com";
//        String emailSubject = subject;
//        String emailContent = content;
//        notification.sendMail(toEmail, emailSubject, emailContent);
//    }

    private void cancelOrder() {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
   
    DefaultTableModel  t2 = (DefaultTableModel) ListingsTbl.getModel();
        int selectedRow=ListingsTbl.getSelectedRow();
        if(selectedRow>=0)
        {
        int s=Integer.parseInt(t2.getValueAt(selectedRow, 0).toString());
        System.out.println("id"+s);
            ListingRequestDirectory dire=system.getListingRequestDirectory();
        List<ListingRequest> order=dire.getListingRequirement();
        
        int u=order.size();
        
        for(int i=0;i<u;i++)
        {
            ListingRequest o=order.get(i);
            if(s==o.getId()/*&&o.getStatus().matches("Deliver Man Assigned")*/)
            {
                if(!o.getStatus().matches("Order Recieved"))
                {
                o.setStatus("Cancelled");
                String subject = "Request Cancelled";
                String content = "Medicine request was cancelled.";
                //sendmail(subject, content);
                }
                else
                {
                 JOptionPane.showMessageDialog(null,"Wrong Move!!");  

                }
                
            }
        }
           ListingsTbl.setModel(new DefaultTableModel(null,new String[]{"ID","Doctor Name","Pharmacy","Status"}));
        displayTable();
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Select a Row!!");  
        }
    
    }
}

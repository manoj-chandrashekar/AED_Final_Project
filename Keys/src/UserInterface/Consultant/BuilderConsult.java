/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.Consultant;

import Business.DatabaseUtil.DB4OUtil;
import Business.Consultant.Consultant;
import Business.EcoSystem;
import Business.Builder.Builder;
import Business.Builder.BuilderDirectory;
import Business.Builder.Listings;
import Business.UserAccountManagement.UserAccount;
import Business.WorkQueue.ConsultantAppointment;
import Business.WorkQueue.ConsultantAppointmentDirectory;
import Business.WorkQueue.ListingRequest;
import Business.WorkQueue.ListingRequestDirectory;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nagarjun Mallesh
 */
public class BuilderConsult extends javax.swing.JPanel {

    /**
     * Creates new form BuilderConsultJPanel
     */
    private final JPanel container;
    private final EcoSystem system;
    private final UserAccount userAcc;
    private final String studentid;
    private final int appointmentId;

    private DB4OUtil dB4OUtil = DB4OUtil.getInstance();

    public BuilderConsult(JPanel container, EcoSystem system, UserAccount userAcc, String userid, int appointmentId) {
        initComponents();
        this.container = container;
        this.system = system;
        this.userAcc = userAcc;
        this.studentid = userid;
        this.appointmentId = appointmentId;
        BuilderDirectory rd = system.getBuilderDirectory();
        List<Builder> list = rd.getBuilders();
        int s = list.size();

        for (int i = 0; i < s; i++) {
            Builder r = list.get(i);
            String s1 = r.getBuilderName();
            jComboBox1.addItem(s1);

        }
//        orderList.setModel(new DefaultTableModel(null, new String[]{"Medicine","Cost", "Quantity"}));
//        displayOrderTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        reserveButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listingTbl = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(250, 249, 251));
        setPreferredSize(new java.awt.Dimension(1160, 750));

        jPanel1.setBackground(new java.awt.Color(250, 249, 251));
        jPanel1.setPreferredSize(new java.awt.Dimension(1160, 750));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        reserveButton.setBackground(new java.awt.Color(51, 51, 255));
        reserveButton.setFont(new java.awt.Font("SF Pro Text", 0, 14)); // NOI18N
        reserveButton.setForeground(new java.awt.Color(255, 255, 255));
        reserveButton.setText("Reserve");
        reserveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserveButtonActionPerformed(evt);
            }
        });
        jPanel1.add(reserveButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 590, 180, 50));

        jLabel1.setFont(new java.awt.Font("SF Pro Display", 1, 24)); // NOI18N
        jLabel1.setText("Builder Consultant Contact");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(44, 31, 380, -1));

        listingTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AptNo", "Address", "NoOfBeds", "NoOfBaths", "Rent"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        listingTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listingTblMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(listingTbl);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 170, 853, 360));

        jLabel2.setFont(new java.awt.Font("SF Pro Text", 0, 14)); // NOI18N
        jLabel2.setText("Builder");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 110, -1, -1));

        jComboBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox1MouseClicked(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jPanel1.add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 90, 220, 50));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void reserveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reserveButtonActionPerformed
        // TODO add your handling code here:

        raiseRequest();

    }//GEN-LAST:event_reserveButtonActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
//        display();


    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void listingTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listingTblMouseClicked
        // TODO add your handling code here:
        //getQuantity();


    }//GEN-LAST:event_listingTblMouseClicked

    private void jComboBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox1MouseClicked
        // TODO add your handling code here:
        displayListings();
    }//GEN-LAST:event_jComboBox1MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable listingTbl;
    private javax.swing.JButton reserveButton;
    // End of variables declaration//GEN-END:variables

    private void raiseRequest() {
        
          int selectedListing = listingTbl.getSelectedRow();
          
          if(selectedListing < 0){
            JOptionPane.showMessageDialog(this, "Please select the listing to proceed for reservation");
            return;
          }
          
          DefaultTableModel model = (DefaultTableModel) listingTbl.getModel();
          Listings listing = (Listings) model.getValueAt(selectedListing, 0);
          
          ListingRequest reqListing = new ListingRequest();
          int r = 1 + (int) (Math.random() * 100);
          reqListing.setId(r);
          reqListing.setStudentId(studentid);
          Consultant consultant = (Consultant) (userAcc);
          reqListing.setConsultantName(consultant.getName());
          reqListing.setBuilderName(jComboBox1.getSelectedItem().toString());
          reqListing.setStatus("Reserved listing");
          reqListing.setListings(listing);
          JOptionPane.showMessageDialog(null, "Listing is reserved");

    }

//    private void getQuantity() {
//        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
//        DefaultTableModel table = (DefaultTableModel) listingTbl.getModel();
//        int sRow = listingTbl.getSelectedRow();
//
//        String s1 = table.getValueAt(sRow, 0).toString();
//        String s2 = table.getValueAt(sRow, 1).toString();
//        String response;
//        do {
//            response = JOptionPane.showInputDialog("Please provide unit numbers available");
//        } while (!response.matches("^[0-9][0-9]?"));
//
//        DefaultTableModel t2 = (DefaultTableModel) orderList.getModel();
//        t2.addRow(new Object[]{s1, s2, response});
//        
//
//    }
//    
    public void updateStatus(){
            ConsultantAppointmentDirectory cunsultantApp = system.getConsultantAppointmentDir();
            List<ConsultantAppointment> docAppList = cunsultantApp.getAppointments();
            System.out.println("appid   " + appointmentId);
            int l = docAppList.size();

            for (int i = 0; i < l; i++) {
                ConsultantAppointment docList = docAppList.get(i);
                if(appointmentId == docList.getId()){
                    docList.setStatus("Suggested");
                }
            }
    }

    private void displayListings() {
        
        BuilderDirectory builderDir = system.getBuilderDirectory();
        List<Builder> list = builderDir.getBuilders();
        String s = jComboBox1.getSelectedItem().toString();

        int length = list.size();

        for (int i = 0; i < length; i++) {
            Builder builder = list.get(i);

            if (s.matches(builder.getBuilderName())) {

//                Map<String, String> abc = pharmacy.getMedicines();
                List<Listings> listingsList = builder.getListings();

                DefaultTableModel model = (DefaultTableModel) listingTbl.getModel();
                model.setRowCount(0);
                
                for (Listings listing  : listingsList) {
                    Object[] row = new Object[5];
                    row[0] = listing;
                    row[1] = listing.getAddress();
                    row[2] = listing.getNoOfBeds();
                    row[3] = listing.getNoOfBaths();
                    row[4] = listing.getRent();
                    
                    
                    model.addRow(row);
                }
            }
        }
    }



    
}
